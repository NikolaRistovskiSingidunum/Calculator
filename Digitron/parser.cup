/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
	//fis = new FileInputStream(System.in);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN, POWER, COS, SIN, SQRT, DELI;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal Double DOUBLENUMBER;
/* Non terminals */
non terminal            expr_list;
non terminal Double    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;

precedence left TIMES, DELI;

precedence left UMINUS;
precedence left SQRT;
precedence right POWER;


/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::=  expr:e1 POWER expr:e2            {: RESULT = Math.pow( e1,e2 ); :}
			 | expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
       		 
             | MINUS expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
             | NUMBER:n	                     {: RESULT = new Double(n);           :}
           	| DOUBLENUMBER:n	                     {: RESULT = n;           :}
           	| COS LPAREN expr:e RPAREN {: RESULT = Math.cos( e); :}
           	| SIN LPAREN expr:e RPAREN {: RESULT = Math.sin( e); :}
           	| SQRT LPAREN expr:e RPAREN {: RESULT = Math.sqrt( e); :}  
           	| expr:e1 DELI expr:e2            {: RESULT = e1/e2; :}
             ;
       